/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTConditionalExpression.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * Represents a conditional expression, aka ternary expression. This operation has
 * a greater precedence as {@linkplain ASTExpression assignment expressions},
 * and lower as {@link ASTConditionalOrExpression}.
 *
 * <p>Note that the children of this node are not necessarily {@link ASTConditionalOrExpression},
 * rather, they are expressions with an operator precedence greater or equal to ConditionalOrExpression.
 *
 * <pre>
 *
 * ConditionalExpression ::= {@linkplain ASTConditionalOrExpression ConditionalOrExpression} "?"  {@linkplain ASTExpression Expression} ":" {@linkplain ASTConditionalExpression ConditionalExpression}
 *
 * </pre>
 *
 */
public class ASTConditionalExpression extends AbstractJavaTypeNode {

    private boolean isTernary;

    public ASTConditionalExpression(int id) {
        super(id);
    }

    public ASTConditionalExpression(JavaParser p, int id) {
        super(p, id);
    }

    public void setTernary() {
        isTernary = true;
    }

    // TODO this could be deprecated, there's no way this node is *not* a ternary
    public boolean isTernary() {
        return this.isTernary;
    }

    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
